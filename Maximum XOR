
import java.util.ArrayList;

class Node{
    Node[] links=new Node[26];
    Node(){

    }
    boolean containsKey(int bit){
        return links[bit]!=null;
    }
    void put(int bit,Node node){
        links[bit]=node;
    }
    Node get(int bit){
        return links[bit];
    }
}

class Trie{
    private static Node root;
    Trie(){
        root=new Node();
    }
    public static void insert(int num){
        Node node=root;
        for(int i=31;i>=0;i--){
            int bit=(num>>i)&1;
            if(!node.containsKey(bit)){
                node.put(bit,new Node());
            }
            node=node.get(bit);
        }
    }
    public static int getMax(int num){
        Node node=root;
        int maxNum=0;
        for(int i=31;i>=0;i--){
			int bit=(num>>i)&1;
            if(node.containsKey(1-bit)){
                maxNum|=(1<<i);
                node=node.get(1-bit);
            }else{
                node=node.get(bit);
            }
        } 
        return maxNum;
    }
}


public class Solution 
{

	public static int maxXOR(int n, int m, ArrayList<Integer> arr1, ArrayList<Integer> arr2) 
	{
	    // Write your code here. 
		Trie obj=new Trie();
		for(int it:arr1){
			obj.insert(it);
		}  
		int maxi=0;
		for(int it:arr2){
			maxi=Math.max(maxi, obj.getMax(it));
		}
		return maxi;
	}
}
